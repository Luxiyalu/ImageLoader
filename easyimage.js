// Generated by CoffeeScript 1.7.1
(function() {
  var Evented, cancelAnimationFrame, extend, requestAnimationFrame,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

  if (typeof requestAnimationFrame === "undefined" || requestAnimationFrame === null) {
    requestAnimationFrame = function(fn) {
      return setTimeout(fn, 50);
    };
    cancelAnimationFrame = function(id) {
      return clearTimeout(id);
    };
  }

  if (!Array.prototype.filter) {
    Array.prototype.filter = function(fn, context) {
      var i, result, value, _i, _ref;
      result = [];
      if (!this || typeof fn !== 'function' || fn instanceof RegExp) {
        throw new TypeError();
      }
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.hasOwnProperty(i)) {
          value = this[i];
          if (fn.call(context, value, i, this)) {
            result.push(value);
          }
        }
      }
      return result;
    };
  }

  extend = function() {
    var key, out, source, sources, val, _i, _len;
    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      if (source) {
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          val = source[key];
          if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {
            extend(out[key], val);
          } else {
            out[key] = val;
          }
        }
      }
    }
    return out;
  };

  Evented = (function() {
    function Evented() {}

    Evented.prototype.on = function(event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function(event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function(event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function() {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;

  })();

  if (window.Emg == null) {
    window.Emg = {};
  }

  extend(Emg, Evented.prototype);

  Emg.init = function() {
    Emg.arr = [];
    Emg.currentNum = 0;
    Emg.targetNum = 0;
    Emg.elems = $('.emg');
    Emg.length = Emg.elems.length;
    Emg.elems.each((function(_this) {
      return function(i, e) {
        var $e, alt, src, type;
        $e = $(e);
        alt = $e.data('alt');
        src = $e.data('src');
        type = $e.data('type');
        return Emg.load($e, type, src, alt);
      };
    })(this));
    return Emg.startProcess();
  };

  Emg.startProcess = function() {
    console.log('startProcess');
    Emg.processing = true;
    Emg.processTimer = Date.now();
    return Emg.update();
  };

  Emg.endProcess = function() {
    Emg.trigger('complete');
    Emg.processing = false;
    return clearTimeout(function() {
      return Emg.displayTimeout();
    });
  };

  Emg.update = function() {
    if (Emg.processing) {
      Emg.processHandler();
      return requestAnimationFrame((function(_this) {
        return function() {
          Emg.trigger('update');
          return Emg.update();
        };
      })(this));
    }
  };

  Emg.processHandler = function() {
    var absDelta, delta, filtered, t;
    t = Date.now();
    if (t - Emg.processTimer >= 100) {
      Emg.processTimer = t;
      filtered = Emg.arr.filter(function(e) {
        return e.state() === 'resolved';
      });
      Emg.targetNum = 0 + filtered.length / Emg.length * 100;
    }
    console.log(Emg.currentNum, Emg.targetNum);
    if (Emg.currentNum >= 100) {
      Emg.endProcess();
      return;
    }
    delta = (Emg.targetNum - Emg.currentNum) / 20;
    absDelta = Math.abs(delta);
    if (absDelta < 0.01) {
      return Emg.currentNum = Emg.targetNum;
    } else {
      return Emg.currentNum += delta;
    }
  };

  Emg.load = function($e, type, src, alt) {
    var d;
    if (type === 'cvs') {
      console.log('load with canvas');
    }
    if (type === 'bg') {
      return console.log('load with background');
    } else {
      console.log('load with img');
      d = $.Deferred(function() {
        var $img;
        $img = $('<img src="' + src + '" alt="' + alt + '">');
        $img.on('load', (function(_this) {
          return function(event) {
            return _this.resolve();
          };
        })(this));
        $img.on('error', (function(_this) {
          return function(event) {
            console.log("image doesn't exist");
            return _this.resolve();
          };
        })(this));
        return $e.append($img);
      });
      return Emg.add(d);
    }
  };

  Emg.add = function(def) {
    return Emg.arr.push(def);
  };

  if (typeof define === 'function' && define.amd) {
    define(function() {
      return Emg;
    });
  } else if (typeof exports === 'object') {
    module.exports = Emg;
  } else {
    Emg.init();
  }

}).call(this);

//# sourceMappingURL=easyimage.map
